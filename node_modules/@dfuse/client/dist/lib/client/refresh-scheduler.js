"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
function createRefreshScheduler() {
    return new DefaultRefreshScheduler();
}
exports.createRefreshScheduler = createRefreshScheduler;
class DefaultRefreshScheduler {
    constructor() {
        this.debug = debug_1.default("dfuse:refresh-scheduler");
    }
    release() {
        this.debug("Releasing default refresh scheduler");
        if (this.renewalTimeout !== undefined) {
            this.debug("Clearing refresh timeout interval");
            this.clearRefreshTimeout();
        }
    }
    hasScheduledJob() {
        return this.renewalTimeout !== undefined;
    }
    schedule(delayInSeconds, job, onJobFailed) {
        if (delayInSeconds <= 0) {
            this.debug("Delay in seconds should be greater than 0");
            return;
        }
        if (this.renewalTimeout) {
            this.debug("Clearing previous sheduled timer");
            this.clearRefreshTimeout();
        }
        this.renewalTimeout = setTimeout(() => {
            try {
                this.debug("Executing scheduled job at %s%O", new Date(), job);
                job();
            }
            catch (error) {
                this.debug("Scheduled job failed (%o)", error);
                if (onJobFailed) {
                    onJobFailed(error);
                }
            }
            this.clearRefreshTimeout();
        }, delayInSeconds * 1000);
    }
    clearRefreshTimeout() {
        clearTimeout(this.renewalTimeout);
        this.renewalTimeout = undefined;
    }
}
//# sourceMappingURL=refresh-scheduler.js.map